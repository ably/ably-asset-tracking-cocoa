import AblyAssetTrackingCore
import AblyAssetTrackingInternal

//This mock was generated by sourcery, however sourcery seems to have problems with generating mocks based on generic
//protocols and it's output doesn't compile without some manual tweaks in the generated code, so all the Worker Queue related
//mocks are not included in the `.sourcery-InternalMocks.yml` file.
public class WorkerMock: Worker {
    public typealias PropertiesType = WorkerQueuePropertiesMock
    public typealias WorkerSpecificationType = WorkerMock
    

    public init() {}


    //MARK: - doWork
    public var doWorkPropertiesDoAsyncWorkPostWorkThrowableError: Error?
    public var doWorkPropertiesDoAsyncWorkPostWorkCallsCount = 0
    public var doWorkPropertiesDoAsyncWorkPostWorkCalled: Bool {
        return doWorkPropertiesDoAsyncWorkPostWorkCallsCount > 0
    }
    public var doWorkPropertiesDoAsyncWorkPostWorkReturnValue: PropertiesType!
    public var doWorkPropertiesDoAsyncWorkPostWorkClosure: ((PropertiesType, (@escaping (WorkerAsyncWorkCompletionHandler) -> Void) -> Void, @escaping (WorkerSpecificationType) -> Void) throws -> PropertiesType)?
    
    public func doWork(properties: PropertiesType,
                       doAsyncWork: (@escaping (WorkerAsyncWorkCompletionHandler) -> Void) -> Void,
                       postWork: @escaping (WorkerSpecificationType) -> Void) throws -> PropertiesType {
        if let error = doWorkPropertiesDoAsyncWorkPostWorkThrowableError {
            throw error
        }
        doWorkPropertiesDoAsyncWorkPostWorkCallsCount += 1
        if let doWorkPropertiesDoAsyncWorkPostWorkClosure = doWorkPropertiesDoAsyncWorkPostWorkClosure {
            return try doWorkPropertiesDoAsyncWorkPostWorkClosure(properties, doAsyncWork, postWork)
        } else {
            return doWorkPropertiesDoAsyncWorkPostWorkReturnValue
        }
    }

    //MARK: - doWhenStopped
    public var doWhenStoppedErrorCallsCount = 0
    public var doWhenStoppedErrorCalled: Bool {
        return doWhenStoppedErrorCallsCount > 0
    }
    public var doWhenStoppedErrorReceivedError: Error?
    public var doWhenStoppedErrorReceivedInvocations: [Error] = []
    public var doWhenStoppedErrorClosure: ((Error) -> Void)?

    public func doWhenStopped(error: Error) {
        doWhenStoppedErrorCallsCount += 1
        doWhenStoppedErrorReceivedError = error
        doWhenStoppedErrorReceivedInvocations.append(error)
        doWhenStoppedErrorClosure?(error)
    }

    //MARK: - onUnexpectedError
    public var onUnexpectedErrorErrorPostWorkCallsCount = 0
    public var onUnexpectedErrorErrorPostWorkCalled: Bool {
        return onUnexpectedErrorErrorPostWorkCallsCount > 0
    }
    public var onUnexpectedErrorErrorPostWorkReceivedArguments: (error: Error, postWork: (WorkerSpecificationType) -> Void)?
    public var onUnexpectedErrorErrorPostWorkReceivedInvocations: [(error: Error, postWork: (WorkerSpecificationType) -> Void)] = []
    public var onUnexpectedErrorErrorPostWorkClosure: ((Error, @escaping (WorkerSpecificationType) -> Void) -> Void)?

    public func onUnexpectedError(error: Error, postWork: @escaping (WorkerSpecificationType) -> Void) {
        onUnexpectedErrorErrorPostWorkCallsCount += 1
        onUnexpectedErrorErrorPostWorkReceivedArguments = (error: error, postWork: postWork)
        onUnexpectedErrorErrorPostWorkReceivedInvocations.append((error: error, postWork: postWork))
        onUnexpectedErrorErrorPostWorkClosure?(error, postWork)
    }

    //MARK: - onUnexpectedAsyncError
    public var onUnexpectedAsyncErrorErrorPostWorkCallsCount = 0
    public var onUnexpectedAsyncErrorErrorPostWorkCalled: Bool {
        return onUnexpectedAsyncErrorErrorPostWorkCallsCount > 0
    }
    public var onUnexpectedAsyncErrorErrorPostWorkReceivedArguments: (error: Error, postWork: (WorkerSpecificationType) -> Void)?
    public var onUnexpectedAsyncErrorErrorPostWorkReceivedInvocations: [(error: Error, postWork: (WorkerSpecificationType) -> Void)] = []
    public var onUnexpectedAsyncErrorErrorPostWorkClosure: ((Error, @escaping (WorkerSpecificationType) -> Void) -> Void)?

    public func onUnexpectedAsyncError(error: Error, postWork: @escaping (WorkerSpecificationType) -> Void) {
        onUnexpectedAsyncErrorErrorPostWorkCallsCount += 1
        onUnexpectedAsyncErrorErrorPostWorkReceivedArguments = (error: error, postWork: postWork)
        onUnexpectedAsyncErrorErrorPostWorkReceivedInvocations.append((error: error, postWork: postWork))
        onUnexpectedAsyncErrorErrorPostWorkClosure?(error, postWork)
    }
}
