import AblyAssetTrackingCore
import AblyAssetTrackingInternal

// This mock was generated by sourcery, however sourcery seems to have problems with generating mocks based on generic
// protocols and it's output doesn't compile without some manual tweaks in the generated code, so all the Worker Queue related
// mocks are not included in the `.sourcery-InternalMocks.yml` file.
public class WorkerFactoryMock: WorkerFactory {
    public typealias PropertiesType = WorkerQueuePropertiesMock
    public typealias WorkerSpecificationType = WorkerMock

    public init() {}

    // MARK: - createWorker
    public var createWorkerWorkerSpecificationLogHandlerCallsCount = 0
    public var createWorkerWorkerSpecificationLogHandlerCalled: Bool {
        createWorkerWorkerSpecificationLogHandlerCallsCount > 0
    }
    public var createWorkerWorkerSpecificationReceivedArguments: (workerSpecification: WorkerSpecificationType, logHandler: InternalLogHandler?)?
    public var createWorkerWorkerSpecificationLogHandlerReceivedInvocations: [(workerSpecification: WorkerSpecificationType, logHandler: InternalLogHandler?)] = []
    public var createWorkerWorkerSpecificationLogHandlerReturnValue: (any Worker<PropertiesType, WorkerSpecificationType>)!
    public var createWorkerWorkerSpecificationLogHandlerClosure: ((WorkerSpecificationType, InternalLogHandler?) -> any Worker<PropertiesType, WorkerSpecificationType>)?

    public func createWorker(workerSpecification: WorkerSpecificationType, logHandler: InternalLogHandler?) -> any Worker<PropertiesType, WorkerSpecificationType> {
        createWorkerWorkerSpecificationLogHandlerCallsCount += 1
        createWorkerWorkerSpecificationReceivedArguments = (workerSpecification: workerSpecification, logHandler: logHandler)
        createWorkerWorkerSpecificationLogHandlerReceivedInvocations.append((workerSpecification: workerSpecification, logHandler: logHandler))
        if let createWorkerWorkerSpecificationLogHandlerClosure {
            return createWorkerWorkerSpecificationLogHandlerClosure(workerSpecification, logHandler)
        } else {
            return createWorkerWorkerSpecificationLogHandlerReturnValue
        }
    }
}
