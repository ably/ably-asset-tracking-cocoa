default_platform(:ios)

platform :ios do
  desc 'Run tests on all targets'
  lane :test_all do
    test_core
    test_internal
    test_subscriber
    test_publisher
    test_system
  end

  desc 'Run Core tests'
  lane :test_core do
    xcodebuild(
      workspace: './Examples/AblyAssetTracking.xcworkspace',
      scheme: 'CoreTests',
      configuration: 'Debug',
      destination: 'platform=iOS Simulator,name=iPhone 12',
      test: ""
    )
  end

  desc 'Run Internal tests'
  lane :test_internal do
    xcodebuild(
      workspace: './Examples/AblyAssetTracking.xcworkspace',
      scheme: 'InternalTests',
      configuration: 'Debug',
      destination: 'platform=iOS Simulator,name=iPhone 12',
      test: ""
    )
  end

  desc 'Run Subscriber tests'
  lane :test_subscriber do
    xcodebuild(
      workspace: './Examples/AblyAssetTracking.xcworkspace',
      scheme: 'SubscriberTests',
      configuration: 'Debug',
      destination: 'platform=iOS Simulator,name=iPhone 12',
      test: ""
    )
  end

  desc 'Run Publisher tests'
  lane :test_publisher do
    xcodebuild(
      workspace: './Examples/AblyAssetTracking.xcworkspace',
      scheme: 'PublisherTests',
      configuration: 'Debug',
      destination: 'platform=iOS Simulator,name=iPhone 12',
      test: ""
    )
  end

    desc 'Run System tests'
    lane :test_system do
      create_secrets
      xcodebuild(
        workspace: './Examples/AblyAssetTracking.xcworkspace',
        scheme: 'SystemTests',
        configuration: 'Debug',
        destination: 'platform=iOS Simulator,name=iPhone 12',
        test: ""
      )
    end

  desc 'Build Subscriber SDK and export is as .framework file'
  lane :build_subscriber do
    xcodebuild(
      archive: true,
      workspace: './Examples/AblyAssetTracking.xcworkspace',
      scheme: 'AblyAssetTrackingSubscriber',
      destination: 'generic/platform=iOS',
      archive_path: 'archives/Subscriber.xcarchive',
      xcargs: 'SKIP_INSTALL=NO',
    )
  end

  desc 'Build Publisher SDK and export is as .framework file'
  lane :build_publisher do
    xcodebuild(
      archive: true,
      workspace: './Examples/AblyAssetTracking.xcworkspace',
      scheme: 'AblyAssetTrackingPublisher',
      destination: 'generic/platform=iOS',
      archive_path: 'archives/Publisher.xcarchive',
      xcargs: 'SKIP_INSTALL=NO',
    )
  end

  desc 'Build example apps to validate that there are no build errors'
  lane :build_example_apps do
    xcodebuild(
      workspace: './Examples/AblyAssetTracking.xcworkspace',
      scheme: 'PublisherExample',
      configuration: 'Debug',
      sdk: 'iphonesimulator',
      arch: 'x86_64'
    )

    xcodebuild(
      workspace: './Examples/AblyAssetTracking.xcworkspace',
      scheme: 'SubscriberExample',
      configuration: 'Debug',
      sdk: 'iphonesimulator',
      arch: 'x86_64'
    )

    xcodebuild(
      workspace: './Examples/AblyAssetTracking.xcworkspace',
      scheme: 'PublisherExampleObjectiveC',
      configuration: 'Debug',
      sdk: 'iphonesimulator',
      arch: 'x86_64',
      clean: true,
      build: true
    )

    xcodebuild(
      workspace: './Examples/AblyAssetTracking.xcworkspace',
      scheme: 'SubscriberExampleObjectiveC',
      configuration: 'Debug',
      sdk: 'iphonesimulator',
      arch: 'x86_64',
      clean: true,
      build: true
    )
  end

  desc 'Create swift file with API keys'
  lane :create_secrets do
    File.write("../Tests/SystemTests/Secrets.swift", "struct Secrets {\n\tstatic let ablyApiKey = \"#{ENV['ABLY_API_KEY']}\"\n\tstatic let mapboxAccessToken = \"#{ENV['MAPBOX_ACCESS_TOKEN']}\"\n}")
  end
end
